var searchIndex = {};
searchIndex["dot"] = {"doc":"Generate files suitable for use with Graphviz","items":[[3,"Id","dot","`Id` is a Graphviz `ID`.",null,null],[3,"Arrow","","This structure holds all information that can describe an arrow connected to either start or end of an edge.",null,null],[12,"arrows","","",0,null],[4,"LabelText","","The text for a graphviz label on a node or edge.",null,null],[13,"LabelStr","","This kind of label preserves the text directly as is.",1,null],[13,"EscStr","","This kind of label uses the graphviz label escString type: http://www.graphviz.org/content/attrs#kescString",1,null],[13,"HtmlStr","","This uses a graphviz [HTML string label][html]. The string is printed exactly as given, but between `<` and `>`. No escaping is performed.",1,null],[4,"Style","","The style for a node or edge. See http://www.graphviz.org/doc/info/attrs.html#k:style for descriptions. Note that some of these are not valid for edges.",null,null],[13,"None","","",2,null],[13,"Solid","","",2,null],[13,"Dashed","","",2,null],[13,"Dotted","","",2,null],[13,"Bold","","",2,null],[13,"Rounded","","",2,null],[13,"Diagonals","","",2,null],[13,"Filled","","",2,null],[13,"Striped","","",2,null],[13,"Wedged","","",2,null],[4,"Fill","","Arrow modifier that determines if the shape is empty or filled.",null,null],[13,"Open","","",3,null],[13,"Filled","","",3,null],[4,"Side","","Arrow modifier that determines if the shape is clipped. For example `Side::Left` means only left side is visible.",null,null],[13,"Left","","",4,null],[13,"Right","","",4,null],[13,"Both","","",4,null],[4,"ArrowShape","","This enumeration represents all possible arrow edge as defined in grapviz documentation.",null,null],[13,"NoArrow","","No arrow will be displayed",5,null],[13,"Normal","","Arrow that ends in a triangle. Basically a normal arrow. NOTE: there is error in official documentation, this supports both fill and side clipping",5,null],[13,"Box","","Arrow ending in a small square box",5,null],[13,"Crow","","Arrow ending in a three branching lines also called crow's foot",5,null],[13,"Curve","","Arrow ending in a curve",5,null],[13,"ICurve","","Arrow ending in an inverted curve",5,null],[13,"Diamond","","Arrow ending in an diamond shaped rectangular shape.",5,null],[13,"Dot","","Arrow ending in a circle.",5,null],[13,"Inv","","Arrow ending in an inverted triangle.",5,null],[13,"Tee","","Arrow ending with a T shaped arrow.",5,null],[13,"Vee","","Arrow ending with a V shaped arrow.",5,null],[4,"RenderOption","","",null,null],[13,"NoEdgeLabels","","",6,null],[13,"NoNodeLabels","","",6,null],[13,"NoEdgeStyles","","",6,null],[13,"NoNodeStyles","","",6,null],[13,"NoArrows","","",6,null],[5,"escape_html","","Escape tags in such a way that it is suitable for inclusion in a Graphviz HTML label.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"default_options","","Returns vec holding all the default render options.",null,{"inputs":[],"output":{"name":"vec"}}],[5,"render","","Renders directed graph `g` into the writer `w` in DOT syntax. (Simple wrapper around `render_opts` that passes a default set of options.)",null,{"inputs":[{"name":"g"},{"name":"w"}],"output":{"name":"result"}}],[5,"render_opts","","Renders directed graph `g` into the writer `w` in DOT syntax. (Main entry point for the library.)",null,null],[6,"Nodes","","",null,null],[6,"Edges","","",null,null],[8,"Labeller","","Each instance of a type that implements `Label<C>` maps to a unique identifier with respect to `C`, which is used to identify it in the generated .dot file. They can also provide more elaborate (and non-unique) label text that is used in the graphviz rendered output. The graph instance is responsible for providing the DOT compatible identifiers for the nodes and (optionally) rendered labels for the nodes and edges, as well as an identifier for the graph itself.",null,null],[10,"graph_id","","Must return a DOT compatible identifier naming the graph.",7,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[10,"node_id","","Maps `n` to a unique identifier with respect to `self`. The implementer is responsible for ensuring that the returned name is a valid DOT identifier.",7,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"id"}}],[11,"node_shape","","Maps `n` to one of the [graphviz `shape` names][1]. If `None` is returned, no `shape` attribute is specified.",7,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"option"}}],[11,"node_label","","Maps `n` to a label that will be used in the rendered output. The label need not be unique, and may be the empty string; the default is just the output from `node_id`.",7,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"labeltext"}}],[11,"edge_label","","Maps `e` to a label that will be used in the rendered output. The label need not be unique, and may be the empty string; the default is in fact the empty string.",7,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"labeltext"}}],[11,"node_style","","Maps `n` to a style that will be used in the rendered output.",7,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"style"}}],[11,"edge_end_arrow","","Maps `e` to arrow style that will be used on the end of an edge. Defaults to normal.",7,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"arrow"}}],[11,"edge_start_arrow","","Maps `e` to arrow style that will be used on the end of an edge. Defaults to no arrow style.",7,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"arrow"}}],[11,"edge_style","","Maps `e` to a style that will be used in the rendered output.",7,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"style"}}],[8,"GraphWalk","","GraphWalk is an abstraction over a directed graph = (nodes,edges) made up of node handles `N` and edge handles `E`, where each `E` can be mapped to its source and target nodes.",null,null],[10,"nodes","","Returns all the nodes in this graph.",8,{"inputs":[{"name":"self"}],"output":{"name":"nodes"}}],[10,"edges","","Returns all of the edges in this graph.",8,{"inputs":[{"name":"self"}],"output":{"name":"edges"}}],[10,"source","","The source node for `edge`.",8,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"n"}}],[10,"target","","The target node for `edge`.",8,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"n"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_slice","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","","Creates an `Id` named `name`.",9,{"inputs":[{"name":"name"}],"output":{"name":"result"}}],[11,"as_slice","","",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"name","","",9,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"label","","",1,{"inputs":[{"name":"s"}],"output":{"name":"labeltext"}}],[11,"escaped","","",1,{"inputs":[{"name":"s"}],"output":{"name":"labeltext"}}],[11,"html","","",1,{"inputs":[{"name":"s"}],"output":{"name":"labeltext"}}],[11,"to_dot_string","","Renders text as string suitable for a label in a .dot file. This includes quotes or suitable delimeters.",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"prefix_line","","Puts `prefix` on a line above this label, with a blank line separator.",1,{"inputs":[{"name":"self"},{"name":"labeltext"}],"output":{"name":"labeltext"}}],[11,"suffix_line","","Puts `suffix` on a line below this label, with a blank line separator.",1,{"inputs":[{"name":"self"},{"name":"labeltext"}],"output":{"name":"labeltext"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"arrow"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"arrow"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"arrow"}],"output":{"name":"bool"}}],[11,"none","","Arrow constructor which returns an empty arrow",0,{"inputs":[],"output":{"name":"arrow"}}],[11,"normal","","Arrow constructor which returns a regular triangle arrow, without modifiers",0,{"inputs":[],"output":{"name":"arrow"}}],[11,"from_arrow","","Arrow constructor which returns an arrow created by a given ArrowShape.",0,{"inputs":[{"name":"arrowshape"}],"output":{"name":"arrow"}}],[11,"to_dot_string","","Function which converts given arrow into a renderable form.",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"fill"}}],[11,"hash","","",3,null],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"fill"}],"output":{"name":"bool"}}],[11,"as_slice","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"side"}}],[11,"hash","","",4,null],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"side"}],"output":{"name":"bool"}}],[11,"as_slice","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"arrowshape"}}],[11,"hash","","",5,null],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"arrowshape"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"arrowshape"}],"output":{"name":"bool"}}],[11,"none","","Constructor which returns no arrow.",5,{"inputs":[],"output":{"name":"arrowshape"}}],[11,"normal","","Constructor which returns normal arrow.",5,{"inputs":[],"output":{"name":"arrowshape"}}],[11,"boxed","","Constructor which returns a regular box arrow.",5,{"inputs":[],"output":{"name":"arrowshape"}}],[11,"crow","","Constructor which returns a regular crow arrow.",5,{"inputs":[],"output":{"name":"arrowshape"}}],[11,"curve","","Constructor which returns a regular curve arrow.",5,{"inputs":[],"output":{"name":"arrowshape"}}],[11,"icurve","","Constructor which returns an inverted curve arrow.",5,{"inputs":[],"output":{"name":"arrowshape"}}],[11,"diamond","","Constructor which returns a diamond arrow.",5,{"inputs":[],"output":{"name":"arrowshape"}}],[11,"dot","","Constructor which returns a circle shaped arrow.",5,{"inputs":[],"output":{"name":"arrowshape"}}],[11,"inv","","Constructor which returns an inverted triangle arrow.",5,{"inputs":[],"output":{"name":"arrowshape"}}],[11,"tee","","Constructor which returns a T shaped arrow.",5,{"inputs":[],"output":{"name":"arrowshape"}}],[11,"vee","","Constructor which returns a V shaped arrow.",5,{"inputs":[],"output":{"name":"arrowshape"}}],[11,"to_dot_string","","Function which renders given ArrowShape into a String for displaying.",5,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"renderoption"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"renderoption"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Arrow"],[4,"LabelText"],[4,"Style"],[4,"Fill"],[4,"Side"],[4,"ArrowShape"],[4,"RenderOption"],[8,"Labeller"],[8,"GraphWalk"],[3,"Id"]]};
searchIndex["factor_graph"] = {"doc":"Crate allowing creation and manipulation of probabilistic factor graphs.","items":[[3,"FactorGraph","factor_graph","Struct representing the full factor graph.",null,null],[11,"graph_id","","",0,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"node_id","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"id"}}],[11,"node_label","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"labeltext"}}],[11,"node_shape","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"edge_end_arrow","","",0,null],[11,"nodes","","",0,{"inputs":[{"name":"self"}],"output":{"name":"nodes"}}],[11,"edges","","",0,{"inputs":[{"name":"self"}],"output":{"name":"edges"}}],[11,"source","","",0,null],[11,"target","","",0,null],[0,"variable","","Module with variable-specific functionality",null,null],[3,"DiscreteVariable","factor_graph::variable","Struct representing a single variable.",null,null],[8,"Variable","","Trait representing a variable stored in the factor graph.",null,null],[10,"get_var_id","","Get this variable's id.",1,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"add_factor","","Add an associated factor to this variable.",1,{"inputs":[{"name":"self"},{"name":"factor"}],"output":null}],[10,"get_factors","","Get the factors associated to this variable.",1,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new Variable.",2,{"inputs":[{"name":"u32"},{"name":"str"},{"name":"vec"}],"output":{"name":"discretevariable"}}],[11,"get_var_id","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"add_factor","","",2,{"inputs":[{"name":"self"},{"name":"factor"}],"output":null}],[11,"get_factors","","",2,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_name","","",2,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_id","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_factor","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"add_to_tree","","",2,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"spanningtree"}],"output":null}],[0,"factor","factor_graph","Module holding factor-specific functionality",null,null],[3,"Factor","factor_graph::factor","Struct representing a factor over several variables.",null,null],[11,"new","","Create a new Factor with associated variables.",3,null],[11,"get_variables","","Function to get variables associated with this factor",3,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_name","","",3,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_id","","",3,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_factor","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"add_to_tree","","",3,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"spanningtree"}],"output":null}],[0,"tree","factor_graph","Module with spanning tree code",null,null],[3,"TreeNode","factor_graph::tree","Struct representing a node in the tree.",null,null],[12,"index","","Index of this node within the tree.",4,null],[12,"children","","Children of this node in the tree.",4,null],[3,"SpanningTree","","Struct representing a spanning tree over an underlying factor graph.",null,null],[12,"all_nodes","","Vector storing all nodes in the tree.",5,null],[12,"cur_index","","Current index into the vector of all nodes.",5,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"treenode"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Make a new tree node.",4,{"inputs":[{"name":"usize"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"treenode"}}],[11,"new_root","","Make a new root node, which doesn't have a parent.",4,{"inputs":[{"name":"usize"},{"name":"u32"},{"name":"str"}],"output":{"name":"treenode"}}],[11,"get_name","","Function to get this node's name.",4,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"add_child","","Add a child to this tree node.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"new","","Make a new spanning tree.",5,{"inputs":[{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"spanningtree"}}],[11,"add_child","","Add a child to the specified node within the tree.",5,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"str"}],"output":null}],[11,"has_node","","Test whether the spanning tree already contains a node",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"render_to","","Render this tree to a Graphviz file",5,{"inputs":[{"name":"self"},{"name":"w"}],"output":null}],[8,"FactorGraphItem","factor_graph","Trait representing a generic item stored in the factor graph.",null,null],[10,"get_name","","Get the name of this item.",6,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"get_id","","Get this item's id.",6,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"is_factor","","Return whether the item is a factor.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"add_to_tree","","Add this node to the spanning tree.",6,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"spanningtree"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create an empty FactorGraph",0,{"inputs":[],"output":{"name":"factorgraph"}}],[11,"add_discrete_var","","Add a new variable with the specified name to the factor graph.",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"vec"}],"output":null}],[11,"add_factor","","Add a new factor with the specified variables to the factor graph.",0,null],[11,"render_to","","Render this graph to a Graphviz file",0,{"inputs":[{"name":"self"},{"name":"w"}],"output":null}],[11,"make_spanning_tree","","Make a spanning tree from the current factor graph with the specified root variable.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"spanningtree"}}],[11,"render_spanning_tree_to","","Render a spanning tree for the factor graph to the input file, starting from the input variable.",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"w"}],"output":null}],[11,"graph_id","factor_graph::tree","",5,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"node_id","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"id"}}],[11,"node_label","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"labeltext"}}],[11,"nodes","","",5,{"inputs":[{"name":"self"}],"output":{"name":"nodes"}}],[11,"edges","","",5,{"inputs":[{"name":"self"}],"output":{"name":"edges"}}],[11,"source","","",5,null],[11,"target","","",5,null]],"paths":[[3,"FactorGraph"],[8,"Variable"],[3,"DiscreteVariable"],[3,"Factor"],[3,"TreeNode"],[3,"SpanningTree"],[8,"FactorGraphItem"]]};
searchIndex["getopts"] = {"doc":"Simple getopt alternative.","items":[[3,"Options","getopts","A description of the options that a program can handle.",null,null],[3,"Matches","","The result of checking command line arguments. Contains a vector of matches and a vector of free strings.",null,null],[12,"free","","Free string fragments",0,null],[4,"ParsingStyle","","What parsing style to use when parsing arguments.",null,null],[13,"FloatingFrees","","Flags and \"free\" arguments can be freely inter-mixed.",1,null],[13,"StopAtFirstFree","","As soon as a \"free\" argument (i.e. non-flag) is encountered, stop considering any remaining arguments as flags.",1,null],[4,"HasArg","","Describes whether an option has an argument.",null,null],[13,"Yes","","The option requires an argument.",2,null],[13,"No","","The option takes no argument.",2,null],[13,"Maybe","","The option argument is optional.",2,null],[4,"Occur","","Describes how often an option may occur.",null,null],[13,"Req","","The option occurs once.",3,null],[13,"Optional","","The option occurs at most once.",3,null],[13,"Multi","","The option occurs zero or more times.",3,null],[4,"Fail","","The type returned when the command line does not conform to the expected format. Use the `Debug` implementation to output detailed information.",null,null],[13,"ArgumentMissing","","The option requires an argument but none was passed.",4,null],[13,"UnrecognizedOption","","The passed option is not declared among the possible options.",4,null],[13,"OptionMissing","","A required option is not present.",4,null],[13,"OptionDuplicated","","A single occurrence option is being used multiple times.",4,null],[13,"UnexpectedArgument","","There's an argument being passed to a non-argument option.",4,null],[6,"Result","","The result of parsing a command line with a set of options.",null,null],[11,"new","","Create a blank set of options.",5,{"inputs":[],"output":{"name":"options"}}],[11,"parsing_style","","Set the parsing style.",5,{"inputs":[{"name":"self"},{"name":"parsingstyle"}],"output":{"name":"options"}}],[11,"long_only","","Set or clear \"long options only\" mode.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"options"}}],[11,"opt","","Create a generic option group, stating all parameters explicitly.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"hasarg"},{"name":"occur"}],"output":{"name":"options"}}],[11,"optflag","","Create a long option that is optional and does not take an argument.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"optflagmulti","","Create a long option that can occur more than once and does not take an argument.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"optflagopt","","Create a long option that is optional and takes an optional argument.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"optmulti","","Create a long option that is optional, takes an argument, and may occur multiple times.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"optopt","","Create a long option that is optional and takes an argument.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"reqopt","","Create a long option that is required and takes an argument.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"parse","","Parse command line arguments according to the provided options.",5,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"result"}}],[11,"short_usage","","Derive a short one-line usage summary from a set of long options.",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"usage","","Derive a usage message from a set of options.",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"parsingstyle"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"parsingstyle"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"hasarg"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"hasarg"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"occur"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"occur"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"matches"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"matches"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"matches"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"fail"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"fail"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"fail"}],"output":{"name":"bool"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"opt_defined","","Returns true if an option was defined",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"opt_present","","Returns true if an option was matched.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"opt_count","","Returns the number of times an option was matched.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"usize"}}],[11,"opts_present","","Returns true if any of several options were matched.",0,null],[11,"opts_str","","Returns the string argument supplied to one of several matching options or `None`.",0,null],[11,"opt_strs","","Returns a vector of the arguments provided to all matches of the given option.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"vec"}}],[11,"opt_str","","Returns the string argument supplied to a matching option or `None`.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"opt_default","","Returns the matching string, a default, or `None`.",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Matches"],[4,"ParsingStyle"],[4,"HasArg"],[4,"Occur"],[4,"Fail"],[3,"Options"]]};
initSearch(searchIndex);
